# tools
CROSS_COMPILE=riscv64-unknown-elf-
AR = ${CROSS_COMPILE}ar
AS = ${CROSS_COMPILE}as
CC = ${CROSS_COMPILE}gcc
CXX = ${CROSS_COMPILE}c++
LD = ${CROSS_COMPILE}ld
OBJCOPY = ${CROSS_COMPILE}objcopy
OBJDUMP = ${CROSS_COMPILE}objdump

export QEMU_AUDIO_DRV=none

SRC_DIR=$(ROOT_DIR)/kernel

ARCH_DIR=$(SRC_DIR)/hardware/riscv/arch
BSP_DIR=bsp

SYS_FULL_DIR = $(ROOT_DIR)/system
BUILD_DIR = .

# flags
ASFLAGS = $(OPTM) -I. -I$(SRC_DIR)/include $(ARCH_CFLAGS)

ifeq ($(SMP),yes)
CFLAGS += -DKERNEL_SMP
ASFLAGS += -DKERNEL_SMP
endif

ifeq ($(DPI),yes)
CFLAGS +=  -DENABLE_DPI
endif

ifeq ($(KERNEL_CONSOLE),yes)
CFLAGS +=  -DKCONSOLE
endif

ifeq ($(C906_EXTEND),yes)
CFLAGS +=  -DC906_EXTEND
endif

ifeq ($(DEBUG),yes)
OPTM = -g -DKDEBUG
else
OPTM = -O2
endif

CFLAGS += $(OPTM) \
	-mcmodel=medany \
	-fno-optimize-sibling-calls -mstrict-align \
	-I. -I$(SRC_DIR)/lib/include \
	-fpie \
	-I$(SRC_DIR)/kernel/include \
	-I$(SRC_DIR)/dev/include \
	-I$(ARCH_DIR)/$(ARCH) \
	-I$(ARCH_DIR)/riscv/common/include \
	$(ARCH_CFLAGS) \
	-Wstrict-prototypes \
	-pedantic -Wall -Wextra -fPIC \
	-fno-builtin-printf \
	-fno-builtin-strcpy \
	-Wno-overlength-strings \
	-fno-builtin-exit \
	-fno-builtin-stdio \
	-fno-builtin-memset \
	-fno-builtin-memcpy \
	-fno-builtin-strchr \
	-fno-builtin-strcmp \
	-fno-builtin-strlen \
	-fno-builtin-strncpy \
	-fno-builtin-strncmp \
	-fno-stack-protector

START_OBJ=$(BSP_DIR)/start.o 

ARCH_OBJS += \
	$(ARCH_DIR)/common/src/irq.o \
	$(ARCH_DIR)/common/src/interrupt.o \
	$(ARCH_DIR)/common/src/sbi.o \
	$(BSP_DIR)/$(BSP)/sd.o  \
	$(BSP_DIR)/$(BSP)/cfi.o  \
	$(BSP_DIR)/$(BSP)/timer.o \
	$(BSP_DIR)/$(BSP)/irq.o \
	$(ARCH_DIR)/$(ARCH)/system.o \
	$(BSP_DIR)/$(BSP)/fb.o  \
	$(ARCH_DIR)/common/src/mmu_pte_flags.o \
	$(ARCH_DIR)/common/src/mmu_arch.o \
	$(ARCH_DIR)/common/src/memcpy.o \
	$(BSP_DIR)/$(BSP)/uart.o \
	$(BSP_DIR)/$(BSP)/hw_info_arch.o \
	$(ARCH_DIR)/$(ARCH)/boot.o 

ifeq ($(SMP),yes)
ARCH_OBJS += $(BSP_DIR)/$(BSP)/ipi.o \
	$(BSP_DIR)/$(BSP)/core.o
endif

LIB_GRAPH_DIR=$(SRC_DIR)/lib/graph
LIB_GRAPH_OBJS = $(LIB_GRAPH_DIR)/src/graph.o \
	$(LIB_GRAPH_DIR)/src/pixel.o \
	$(LIB_GRAPH_DIR)/src/text.o \
	$(LIB_GRAPH_DIR)/src/font8x16.o \
	$(LIB_GRAPH_DIR)/src/font.o
CFLAGS += -I$(LIB_GRAPH_DIR)/include

LIB_CONSOLE_DIR=$(SRC_DIR)/lib/console
LIB_CONSOLE_OBJS = $(LIB_CONSOLE_DIR)/src/console.o 
CFLAGS += -I$(LIB_CONSOLE_DIR)/include

LIB_EXT2_DIR=$(SRC_DIR)/lib/ext2
LIB_EXT2_OBJS = $(LIB_EXT2_DIR)/src/ext2read.o 
CFLAGS += -I$(LIB_EXT2_DIR)/include

LIB_DIR = $(SRC_DIR)/lib/src
LIB_OBJS = \
	$(LIB_DIR)/kstring.o \
	$(LIB_DIR)/atoi.o \
	$(LIB_DIR)/vprintf.o \
	$(LIB_DIR)/proto.o \
	$(LIB_DIR)/queue.o \
	$(LIB_DIR)/kprintf.o \
	$(LIB_GRAPH_OBJS) \
	$(LIB_EXT2_OBJS) \
	$(LIB_CONSOLE_OBJS)

LOAD_DIR=$(SRC_DIR)/loadinit/sd
LOAD_OBJS = \
	$(LOAD_DIR)/ext2read.o \
	$(LOAD_DIR)/loadinit.o
CFLAGS += -I$(LOAD_DIR)
#QEMU_ARGS += -sd $(SYS_FULL_DIR)/root.ext2

DEV_DIR = $(SRC_DIR)/dev/src
DEV_OBJS = 

KERNEL_DIR = $(SRC_DIR)/kernel/src
KERNEL_OBJS = \
	$(KERNEL_DIR)/mm/kalloc.o \
	$(KERNEL_DIR)/mm/trunkmem.o \
	$(KERNEL_DIR)/mm/kmalloc.o \
	$(KERNEL_DIR)/mm/dma.o \
	$(KERNEL_DIR)/mm/shm.o \
	$(KERNEL_DIR)/mm/mmu.o \
	$(KERNEL_DIR)/smp/core.o \
	$(KERNEL_DIR)/kconsole.o \
	$(KERNEL_DIR)/irq.o \
	$(KERNEL_DIR)/svc.o \
	$(KERNEL_DIR)/proc.o \
	$(KERNEL_DIR)/ipc.o \
	$(KERNEL_DIR)/signal.o \
	$(KERNEL_DIR)/interrupt.o \
	$(KERNEL_DIR)/schedule.o \
	$(KERNEL_DIR)/system.o \
	$(KERNEL_DIR)/kevqueue.o \
	$(KERNEL_DIR)/kernel_config.o \
	$(KERNEL_DIR)/hw_info.o \
	$(KERNEL_DIR)/kernel.o

OBJS = $(ARCH_OBJS) \
	$(LIB_OBJS) \
	$(LOAD_OBJS) \
	$(KERNEL_OBJS) \
	$(DEV_OBJS) 

LDFLAGS = -L $(ARCH_DIR)/$(ARCH)

all: $(OS_IMG) 

$(OS_IMG): $(OBJS) $(LDS) $(LDS_QEMU) $(START_OBJ)
	$(LD) $(OBJS) $(LDFLAGS) -T $(LDS) -o $(BUILD_DIR)/$(OS_ELF)
	$(LD) $(OBJS) $(LDFLAGS) -T $(LDS_QEMU) -o $(BUILD_DIR)/$(OS_QEMU_ELF)
	$(OBJCOPY) -O binary $(BUILD_DIR)/$(OS_ELF) $(BUILD_DIR)/$(OS_IMG)
	$(OBJCOPY) -O binary $(BUILD_DIR)/$(OS_QEMU_ELF) $(BUILD_DIR)/$(OS_QEMU_IMG)

asm:
	$(OBJDUMP) -D $(BUILD_DIR)/$(OS_ELF) > $(BUILD_DIR)/kernel.asm

run: 
	$(QEMU_CMD) $(QEMU_FLAGS) -kernel $(BUILD_DIR)/$(OS_QEMU_IMG) $(QEMU_ARGS)

runasm: 
	$(QEMU_CMD) $(QEMU_FLAGS) -kernel $(BUILD_DIR)/$(OS_QEMU_IMG) $(QEMU_ARGS) -d in_asm

debug:
	$(QEMU_CMD) $(QEMU_FLAGS) -gdb tcp::26000 -S -kernel $(BUILD_DIR)/$(OS_QEMU_IMG) $(QEMU_ARGS)

debugasm:
	$(QEMU_CMD) $(QEMU_FLAGS) -d in_asm -gdb tcp::26000 -S -kernel $(BUILD_DIR)/$(OS_QEMU_IMG) $(QEMU_ARGS)

gdb: 
	echo "target remote :26000" > /tmp/gdbinit
	riscv64-linux-gnu-gdb $(BUILD_DIR)/$(OS_QEMU_ELF) -x /tmp/gdbinit
	#gdb-multiarch $(BUILD_DIR)/$(OS_ELF) -x /tmp/gdbinit #for ubuntu 18.04 without riscv64-linux-gnu-gdb

clean:
	rm -f $(OBJS) $(START_OBJ)
	rm -f $(OS_IMG) $(OS_ELF)
	rm -f $(OS_QEMU_IMG) $(OS_QEMU_ELF)
